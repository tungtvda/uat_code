<?php// Require required modelsCore::requireModel('productcategory');Core::requireModel('productbrand');Core::requireModel('producttype');Core::requireModel('wallet');Core::requireModel('member');class ProductModel extends BaseModel{	private $output = array();    private $module_name = "Product";	private $module_dir = "modules/product/";    private $module_default_url = "/main/product/index";    private $module_default_admin_url = "/admin/product/index";	public function __construct()	{		parent::__construct();	}	public function Index($param)	{		$crud = new CRUD();		// Prepare Pagination		$query_count = "SELECT COUNT(*) AS num FROM product WHERE Enabled = 1";		$total_pages = $this->dbconnect->query($query_count)->fetchColumn();		$targetpage = $data['config']['SITE_DIR'].'/main/product/index';		$limit = 5;		$stages = 3;		$page = mysql_escape_string($_GET['page']);		if ($page) {			$start = ($page - 1) * $limit;		} else {			$start = 0;		}		// Initialize Pagination		$paginate = $crud->paginate($targetpage,$total_pages,$limit,$stages,$page);		$sql = "SELECT * FROM product WHERE Enabled = 1 AND TypeID = '".$param."' ORDER BY ID ASC LIMIT $start, $limit";		$result = array();		$i = 0;		foreach ($this->dbconnect->query($sql) as $row)		{			if ($row['ImageURL']=='')			{				$cover_image = $this->config['THEME_DIR'].'img/no_image.png';			}			else			{				$cover_image = Image::getImage($row['ImageURL'],'cover');			}			$result[$i] = array(			'ID' => $row['ID'],            'TypeID' => $row['TypeID'],			'Name' => $row['Name'],			'ImageURL' => $cover_image,			'WalletProfile' => WalletModel::getProductSingleWallet($row['ID']),			'PlayLink' => $row['PlayLink'],			'DemoLink' => $row['DemoLink']);			$i += 1;		}		$result['count'] = $i;		$title = ProductTypeModel::getProductType($param);		$this->output = array(		'config' => $this->config,		'page' => array('title' => $title, 'template' => 'common-1-column.tpl.php', 'custom_inc' => 'on', 'custom_inc_loc' => $this->module_dir.'inc/main/index.inc.php'),		'block' => array('common' => 'false'),		'breadcrumb' => HTML::getBreadcrumb($title,$this->module_default_url,"",$this->config,""),		'content' => $result,		'content_param' => array('count' => $i, 'total_results' => $total_pages, 'paginate' => $paginate),		'meta' => array('active' => "on"));		return $this->output;	}	public function View($param)	{		$sql = "SELECT * FROM product WHERE ID = '".$param."' AND Enabled = 1";		$result = array();		$i = 0;		foreach ($this->dbconnect->query($sql) as $row)		{			$result[$i] = array(			'ID' => $row['ID'],            'TypeID' => $row['TypeID'],			'Name' => $row['Name'],			'ImageURL' => $row['ImageURL'],			'PlayLink' => $row['PlayLink'],			'DemoLink' => $row['DemoLink']);			$i += 1;		}		$this->output = array(		'config' => $this->config,		'page' => array('title' => $result[0]['Title'], 'template' => 'common-1-column.tpl.php', 'custom_inc' => 'on', 'custom_inc_loc' => $this->module_dir.'inc/main/view.inc.php'),		'breadcrumb' => HTML::getBreadcrumb($this->module_name,$this->module_default_url,"",$this->config,$result[0]['Title']),		'content' => $result,		'content_param' => array('count' => $i),		'meta' => array('active' => "on"));		return $this->output;	}	public function AdminIndex($param)	{		// Initialise query conditions		$query_condition = "";		$crud = new CRUD();		if ($_POST['Trigger']=='search_form')		{			// Reset Query Variable			$_SESSION['product_'.__FUNCTION__] = "";			$query_condition .= $crud->queryCondition("TypeID",$_POST['TypeID'],"=");			$query_condition .= $crud->queryCondition("Name",$_POST['Name'],"LIKE");			$query_condition .= $crud->queryCondition("PlayLink",$_POST['PlayLink'],"LIKE");			$query_condition .= $crud->queryCondition("DemoLink",$_POST['DemoLink'],"LIKE");			$_SESSION['product_'.__FUNCTION__]['param']['TypeID'] = $_POST['TypeID'];			$_SESSION['product_'.__FUNCTION__]['param']['Name'] = $_POST['Name'];			$_SESSION['product_'.__FUNCTION__]['param']['PlayLink'] = $_POST['PlayLink'];			$_SESSION['product_'.__FUNCTION__]['param']['DemoLink'] = $_POST['DemoLink'];			// Set Query Variable			$_SESSION['product_'.__FUNCTION__]['query_condition'] = $query_condition;			$_SESSION['product_'.__FUNCTION__]['query_title'] = "Search Results";		}		// Reset query conditions		if ($_GET['page']=="all")		{			$_GET['page'] = "";			unset($_SESSION['product_'.__FUNCTION__]);		}		// Determine Title		if (isset($_SESSION['product_'.__FUNCTION__]))		{			$query_title = "Search Results";            $search = "on";		}		else		{			$query_title = "All Results";            $search = "off";			$sort = TRUE;		}		// Prepare Pagination		$query_count = "SELECT COUNT(*) AS num FROM product ".$_SESSION['product_'.__FUNCTION__]['query_condition'];		$total_pages = $this->dbconnect->query($query_count)->fetchColumn();		$targetpage = $data['config']['SITE_DIR'].'/admin/product/index';		$limit = 10;		$stages = 3;		$page = mysql_escape_string($_GET['page']);		if ($page) {			$start = ($page - 1) * $limit;		} else {			$start = 0;		}		// Initialize Pagination		$paginate = $crud->paginate($targetpage,$total_pages,$limit,$stages,$page);		$sql = "SELECT * FROM product ".$_SESSION['product_'.__FUNCTION__]['query_condition']." ORDER BY ID ASC LIMIT $start, $limit";		$result = array();		$i = 0;		foreach ($this->dbconnect->query($sql) as $row)		{			if ($row['ImageURL']=='')			{				$cover_image = $this->config['THEME_DIR'].'img/no_image.png';			}			else			{				$cover_image = Image::getImage($row['ImageURL'],'cover');			}			$result[$i] = array(			'ID' => $row['ID'],			'TypeID' => ProductTypeModel::getProductType($row['TypeID']),			'Name' => $row['Name'],			'ImageURL' => $cover_image,			'PlayLink' => $row['PlayLink'],			'DemoLink' => $row['DemoLink']);			$i += 1;		}		$this->output = array(		'config' => $this->config,		'page' => array('title' => "Products", 'template' => 'admin.common.tpl.php', 'custom_inc' => 'on', 'custom_inc_loc' => $this->module_dir.'inc/admin/index.inc.php', 'product_delete' => $_SESSION['admin']['product_delete']),		'block' => array('side_nav' => $this->module_dir.'inc/admin/side_nav.product_common.inc.php'),		'breadcrumb' => HTML::getBreadcrumb($this->module_name,$this->module_default_admin_url,"admin",$this->config,""),		'content' => $result,		'content_param' => array('count' => $i, 'total_results' => $total_pages, 'paginate' => $paginate, 'query_title' => $query_title, 'search' => $search, 'enabled_list' => CRUD::getActiveList(), 'productcategory_list' => ProductCategoryModel::getProductCategoryList(), 'productbrand_list' => ProductBrandModel::getProductBrandList(), 'producttype_list' => ProductTypeModel::getProductTypeList(), 'sort' => $sort),		'secure' => TRUE,		'meta' => array('active' => "on"));		unset($_SESSION['admin']['product_delete']);		return $this->output;	}                        public function AdminManage($param)     {               // Initialise query conditions        $query_condition = "";                $crud = new CRUD();                if ($_POST['Trigger']=='search_form')        {            // Reset Query Variable            $_SESSION['product_'.__FUNCTION__] = "";                        $query_condition .= $crud->queryCondition("p.ProfileID",$_POST['ProfileID'],"=");            $query_condition .= $crud->queryCondition("p.ModuleID",$_POST['ModuleID'],"=");            $query_condition .= $crud->queryCondition("p.View",$_POST['View'],"=");            $query_condition .= $crud->queryCondition("p.Add",$_POST['Add'],"=");            $query_condition .= $crud->queryCondition("p.Edit",$_POST['Edit'],"=");            $query_condition .= $crud->queryCondition("p.Delete",$_POST['Delete'],"=");                        $_SESSION['product_'.__FUNCTION__]['param']['ProfileID'] = $_POST['ProfileID'];            $_SESSION['product_'.__FUNCTION__]['param']['ModuleID'] = $_POST['ModuleID'];            $_SESSION['product_'.__FUNCTION__]['param']['View'] = $_POST['View'];            $_SESSION['product_'.__FUNCTION__]['param']['Add'] = $_POST['Add'];            $_SESSION['product_'.__FUNCTION__]['param']['Edit'] = $_POST['Edit'];            $_SESSION['product_'.__FUNCTION__]['param']['Delete'] = $_POST['Delete'];                        // Set Query Variable            $_SESSION['product_'.__FUNCTION__]['query_condition'] = $query_condition;            $_SESSION['product_'.__FUNCTION__]['query_title'] = "Search Results";        }        // Reset query conditions        if ($_GET['page']=="all")        {            $_GET['page'] = "";            unset($_SESSION['product_'.__FUNCTION__]);                   }        // Determine Title        if (isset($_SESSION['product_'.__FUNCTION__]))        {            $query_title = "Search Results";            $search = "on";        }        else        {            $query_title = "All Results";            $search = "off";        }        // Prepare Pagination        #$query_count = "SELECT COUNT(*) AS num FROM permission ".$_SESSION['permission_'.__FUNCTION__]['query_condition'];                $query_count = "SELECT COUNT(*) AS num FROM agent ".$_SESSION['product_'.__FUNCTION__]['query_condition'];                /*echo $query_count;        exit();*/                #echo $query_count;        $total_pages = $this->dbconnect->query($query_count)->fetchColumn();                 $targetpage = $data['config']['SITE_DIR'].'/admin/product/index';        $limit = 10000;        $stages = 3;        $page = mysql_escape_string($_GET['page']);        if ($page) {            $start = ($page - 1) * $limit;         } else {            $start = 0;         }                   // Initialize Pagination        $paginate = $crud->paginate($targetpage,$total_pages,$limit,$stages,$page);                #$sql = "SELECT * FROM permission ".$_SESSION['permission_'.__FUNCTION__]['query_condition']." ORDER BY ProfileID ASC LIMIT $start, $limit";                $sql = "SELECT * FROM agent ".$_SESSION['product_'.__FUNCTION__]['query_condition']." ORDER BY Name ASC LIMIT $start, $limit";        //echo $sql;        //exit;        $result = array();        $i = 0;        foreach ($this->dbconnect->query($sql) as $row)        {            $result[$i] = array(            'ID' => $row['ID'],            'Name' => $row['Name'],            'Product' => $this->getAgentProductList($row['Product']),            'Enabled' => $row['Enabled']);                        $i += 1;        }                $this->output = array(         'config' => $this->config,        'page' => array('title' => "Bulk Update", 'template' => 'admin.common.tpl.php', 'custom_inc' => 'on', 'custom_inc_loc' => $this->module_dir.'inc/admin/manage.inc.php'),        'block' => array('side_nav' => $this->module_dir.'inc/admin/side_nav.permission_common.inc.php'),        'breadcrumb' => HTML::getBreadcrumb($this->module_name,$this->module_default_admin_url,"admin",$this->config,""),        'content' => $result,        'content_param' => array('count' => $i, 'total_results' => $total_pages, 'paginate' => $paginate, 'query_title' => $query_title, 'search' => $search, 'enabled_list' => CRUD::getActiveList(), 'product_list' => ProductModel::getProductList(), 'profile_list' => ProfileModel::getProfileList(), 'module_list' => ModuleModel::getModuleList()),        'secure' => TRUE,        'meta' => array('active' => "on"));                            return $this->output;    }	public function AdminAdd()	{		$this->output = array(		'config' => $this->config,		'page' => array('title' => "Create Product", 'template' => 'admin.common.tpl.php', 'custom_inc' => 'on', 'custom_inc_loc' => $this->module_dir.'inc/admin/add.inc.php', 'product_add' => $_SESSION['admin']['product_add']),		'block' => array('side_nav' => $this->module_dir.'inc/admin/side_nav.product_common.inc.php'),		'breadcrumb' => HTML::getBreadcrumb($this->module_name,$this->module_default_admin_url,"admin",$this->config,"Create Product"),		'content_param' => array('enabled_list' => CRUD::getActiveList(), 'productcategory_list' => ProductCategoryModel::getProductCategoryList(), 'productbrand_list' => ProductBrandModel::getProductBrandList(), 'producttype_list' => ProductTypeModel::getProductTypeList()),		'secure' => TRUE,		'meta' => array('active' => "on"));		unset($_SESSION['admin']['product_add']);		return $this->output;	}	public function AdminAddProcess()	{		/*// Handle Image Upload        $upload['ImageURL'] = File::uploadFile('ImageURL',1,2,"product");        if ($upload['ImageURL']['upload']['status']=="Empty")        {            $file_location['ImageURL'] = "";        }        else if ($upload['ImageURL']['upload']['status']=="Uploaded")        {            $file_location['ImageURL'] = $upload['ImageURL']['upload']['destination'];            Image::generateImage($file_location['ImageURL'],518,178,'cover');        }        else        {            $error['count'] += 1;            $error['ImageURL'] = $upload['ImageURL']['error'];            $file_location['ImageURL'] = "";        }*/		$key = "(TypeID, Name, ImageURL, PlayLink, DemoLink, Enabled)";		$value = "('".$_POST['TypeID']."', '".$_POST['Name']."', '".$file_location['ImageURL']."', '".$_POST['PlayLink']."', '".$_POST['DemoLink']."', '".$_POST['Enabled']."')";		$sql = "INSERT INTO product ".$key." VALUES ". $value;		$count = $this->dbconnect->exec($sql);		$newID = $this->dbconnect->lastInsertId();		//$MemberID = MemberModel::getAllMemberID();				// Set Status        $ok = ($count==1) ? 1 : "";		$this->output = array(		'config' => $this->config,		'page' => array('title' => "Creating Product...", 'template' => 'admin.common.tpl.php'),		'content_param' => array('count' => $count, 'newID' => $newID),		'status' => array('ok' => $ok, 'error' => $error),		'meta' => array('active' => "on"));		return $this->output;	}	public function AdminEdit($param)	{		$sql = "SELECT * FROM product WHERE ID = '".$param."'";		$result = array();		$i = 0;		foreach ($this->dbconnect->query($sql) as $row)		{			if ($row['ImageURL']=='')            {                $cover_image = '';            }            else            {                $cover_image = Image::getImage($row['ImageURL'],'cover');            }			$result[$i] = array(			'ID' => $row['ID'],            'TypeID' => $row['TypeID'],			'Name' => $row['Name'],			'ImageURLCover' => $cover_image,			'ImageURL' => $row['ImageURL'],			'PlayLink' => $row['PlayLink'],			'DemoLink' => $row['DemoLink'],			'Enabled' => $row['Enabled']);			$i += 1;		}		$this->output = array(		'config' => $this->config,		'page' => array('title' => "Edit Product", 'template' => 'admin.common.tpl.php', 'custom_inc' => 'on', 'custom_inc_loc' => $this->module_dir.'inc/admin/edit.inc.php', 'product_add' => $_SESSION['admin']['product_add'], 'product_edit' => $_SESSION['admin']['product_edit']),		'block' => array('side_nav' => $this->module_dir.'inc/admin/side_nav.product_common.inc.php'),		'breadcrumb' => HTML::getBreadcrumb($this->module_name,$this->module_default_admin_url,"admin",$this->config,"Edit Product"),		'content' => $result,		'content_param' => array('count' => $i, 'enabled_list' => CRUD::getActiveList(), 'productcategory_list' => ProductCategoryModel::getProductCategoryList(), 'productbrand_list' => ProductBrandModel::getProductBrandList(), 'producttype_list' => ProductTypeModel::getProductTypeList()),		'secure' => TRUE,		'meta' => array('active' => "on"));		unset($_SESSION['admin']['product_add']);		unset($_SESSION['admin']['product_edit']);		return $this->output;	}	public function AdminEditProcess($param)	{		/*// Handle Image Upload        $upload['ImageURL'] = File::uploadFile('ImageURL',1,2,"product");        if ($upload['ImageURL']['upload']['status']=="Empty")        {            if ($_POST['ImageURLRemove']==1)            {                $file_location['ImageURL'] = "";                Image::deleteImage($_POST['ImageURLCurrent']);                Image::deleteImage(Image::getImage($_POST['ImageURLCurrent'],'cover'));            }            else            {                $file_location['ImageURL'] = $_POST['ImageURLCurrent'];            }        }        else if ($upload['ImageURL']['upload']['status']=="Uploaded")        {            $file_location['ImageURL'] = $upload['ImageURL']['upload']['destination'];            Image::generateImage($file_location['ImageURL'],518,178,'cover');            Image::deleteImage($_POST['ImageURLCurrent']);            Image::deleteImage(Image::getImage($_POST['ImageURLCurrent'],'cover'));        }        else        {            $error['count'] += 1;            $error['ImageURL'] = $upload['ImageURL']['error'];            $file_location['ImageURL'] = "";        }*/		$sql = "UPDATE product SET TypeID='".$_POST['TypeID']."', Name='".$_POST['Name']."', ImageURL='".$file_location['ImageURL']."', PlayLink='".$_POST['PlayLink']."', DemoLink='".$_POST['DemoLink']."', Enabled='".$_POST['Enabled']."' WHERE ID='".$param."'";		$count = $this->dbconnect->exec($sql);		// Set Status        $ok = ($count==1) ? 1 : "";		$this->output = array(		'config' => $this->config,		'page' => array('title' => "Editing Product...", 'template' => 'admin.common.tpl.php'),		'content_param' => array('count' => $count),		'status' => array('ok' => $ok, 'error' => $error),		'meta' => array('active' => "on"));		return $this->output;	}	public function AdminDelete($param)	{		// Delete Images                			$sql = "DELETE FROM wallet WHERE ProductID = '".$param."'";			$count = $this->dbconnect->exec($sql);		        $sql = "SELECT * FROM product WHERE ID = '".$param."'";        $result = array();        $i = 0;        foreach ($this->dbconnect->query($sql) as $row)        {            $result[$i] = array(            'ID' => $row['ID'],            'ImageURL' => $row['ImageURL']);            $i += 1;        }        Image::deleteImage($result[0]['ImageURL']);        Image::deleteImage(Image::getImage($result[0]['ImageURL'],'cover'));		// Delete entry from table		$sql = "DELETE FROM product WHERE ID ='".$param."'";		$count = $this->dbconnect->exec($sql);		// Set Status        $ok = ($count==1) ? 1 : "";		$this->output = array(		'config' => $this->config,		'page' => array('title' => "Deleting Product...", 'template' => 'admin.common.tpl.php'),		'content_param' => array('count' => $count),		'status' => array('ok' => $ok, 'error' => $error),		'meta' => array('active' => "on"));		return $this->output;	}	public function AdminSort()    {        $param = explode(",",$_POST['param']);        $i = 0;        foreach($param as $id)        {            $sql = "UPDATE product SET Position='".$i."' WHERE ID='".$id."'";            $count = $this->dbconnect->exec($sql);            $i++;        }        $result = $i;        return $result;    }    public function AdminPosition()    {        $param = $_POST['param'];        $crud = new CRUD();        $sql = "SELECT * FROM product WHERE ID = '".$param."'";        $result = array();        $i = 0;        foreach ($this->dbconnect->query($sql) as $row)        {            $result[$i] = array(            'ID' => $row['ID'],            'Position' => $row['Position']);            $i += 1;        }        $result = $result[0]['ID'].",".$result[0]['Position'];        return $result;    }	 public function IDToProductName($param)	{	if($param==0){			 $result = "Not Available";			return $result;		}// // //		$sql = "SELECT Name FROM product WHERE ID = '".$param."'";// // //		$result = $this->dbconnect->query($sql);		 $result = $result->fetchColumn();		return $result;// // //	 }	public function getProduct($param)	{		$crud = new CRUD();		$sql = "SELECT * FROM product WHERE ID = '".$param."'";		$result = array();		$i = 0;		foreach ($this->dbconnect->query($sql) as $row)		{			$result[$i] = array(			'ID' => $row['ID'],			'TypeID' => $row['TypeID'],			'Name' => $row['Name'],			'ImageURL' => $cover_image,			'PlayLink' => $row['PlayLink'],			'DemoLink' => $row['DemoLink']);			$i += 1;		}		return $result;	}	public function getPlayNowLink($param)	{		$crud = new CRUD();		$sql = "SELECT PlayLink FROM product WHERE ID = '".$param."'";		$result = array();		$i = 0;		foreach ($this->dbconnect->query($sql) as $row)		{			$result[$i] = array(			'PlayLink' => $row['PlayLink']);			$i += 1;		}		return $result;	}                public function getAPIPlayNowLink($param)	{		$crud = new CRUD();		$sql = "SELECT PlayLink FROM product WHERE ID = '".$param."'";		foreach ($this->dbconnect->query($sql) as $row)		{			$result = $row['PlayLink'];		}		return $result;	}    public function getProductName($param)    {        $crud = new CRUD();        $sql = "SELECT * FROM product WHERE ID = '".$param."'";        $result = array();        $i = 0;        foreach ($this->dbconnect->query($sql) as $row)        {            $result[$i] = array(            'ID' => $row['ID'],            'TypeID' => $row['TypeID'],            'Name' => $row['Name'],            'ImageURL' => $cover_image,            'PlayLink' => $row['PlayLink'],            'DemoLink' => $row['DemoLink']);            $i += 1;        }        return $result[0]['Name'];    }        public function getProductByName($param)    {                $sql = "SELECT ID FROM product WHERE Name = '".$param."'";        $result = array();        $i = 0;        foreach ($this->dbconnect->query($sql) as $row)        {            $result[$i] = array(            'ID' => $row['ID']);            $i += 1;        }        return $result[0]['ID'];    }	public function getProductByType($param)	{		//$crud = new CRUD();		$sql = "SELECT * FROM product WHERE TypeID = '".$param."' ORDER BY Name ASC";		$result = array();		$i = 0;		foreach ($this->dbconnect->query($sql) as $row)		{			$result[$i] = array(			'ID' => $row['ID'],			'Name' => $row['Name'],			//'TypeID' => $row['TypeID'],			'ImageURL' => $cover_image,			'PlayLink' => $row['PlayLink'],			'DemoLink' => $row['DemoLink'],			'Wallet' => WalletModel::getProductWallet($row['ID']));			$i += 1;		}		$result['count'] = $i;		return $result;	}	public function getProductList()	{		$crud = new CRUD();		$sql = "SELECT * FROM product WHERE Enabled = '1' order by CASE WHEN ID = '30' THEN 1 END DESC, Name ASC";		$result = array();		$i = 0;		foreach ($this->dbconnect->query($sql) as $row)		{			$result[$i] = array(			'ID' => $row['ID'],			'TypeID' => ProductTypeModel::getProductType($row['TypeID']),			'Name' => $row['Name'],			'ImageURL' => $cover_image,			'PlayLink' => $row['PlayLink'],			'DemoLink' => $row['DemoLink']);			$i += 1;		}		$result['count'] = $i;		return $result;	}                        public function getProductListByAgent()	{		$crud = new CRUD();                $sql1 = "SELECT Product FROM agent WHERE ID = '".$_SESSION['agent']['ID']."' AND Enabled = '1'";                //echo $sql1;                                $result = array();		foreach ($this->dbconnect->query($sql1) as $row1)		{                    $prod = $row1['Product'];                }                                //echo $prod;                //exit;                                if($prod=='')                {                    //$sql = "SELECT * FROM product WHERE Enabled = '1' ORDER BY Name ASC";                                        $result['count'] = 0;                                    }                    else                {                    $sql = "SELECT * FROM product WHERE ID IN (".$prod.") AND Enabled = '1' order by CASE WHEN ID = '30' THEN 1 END DESC, Name ASC";                                        $i = 0;                    foreach ($this->dbconnect->query($sql) as $row)                    {                            $result[$i] = array(                            'ID' => $row['ID'],                            'TypeID' => ProductTypeModel::getProductType($row['TypeID']),                            'Name' => $row['Name'],                            'ImageURL' => $cover_image,                            'PlayLink' => $row['PlayLink'],                            'DemoLink' => $row['DemoLink']);                            $i += 1;                    }                    $result['count'] = $i;                                    }    		                //echo $sql;				return $result;	}                        public function getAgentProductList($param)	{                           //echo $param.'<br>';               //exit;		$crud = new CRUD();                $result = array();                if($param != '')                {                        $sql = "SELECT * FROM product WHERE ID IN (".$param.") ORDER BY Name ASC";                    //echo $sql.'<br>';                                      //exit;                    $i = 0;                    foreach ($this->dbconnect->query($sql) as $row)                    {                            $result[$i] = array(                            'ID' => $row['ID'],                            'TypeID' => ProductTypeModel::getProductType($row['TypeID']),                            'Name' => $row['Name'],                            'ImageURL' => $cover_image,                            'PlayLink' => $row['PlayLink'],                            'DemoLink' => $row['DemoLink']);                            $i += 1;                    }                    $result['count'] = $i;                                                    }                                if($param == '')                 {                    $result['count'] = 0;                }		return $result;	}    public function getProductListWithWallet()    {                        $crud = new CRUD();        $sql = "SELECT * FROM product WHERE ID IN (SELECT ProductID FROM wallet WHERE MemberID = '".$_SESSION['member']['ID']."' AND Enabled = '1') order by CASE WHEN ID = '30' THEN 1 END DESC, Name ASC";        $result = array();        $i = 0;        foreach ($this->dbconnect->query($sql) as $row)        {            $result[$i] = array(            'ID' => $row['ID'],            'TypeID' => ProductTypeModel::getProductType($row['TypeID']),            'Name' => Helper::translate($row['Name'], "member-wallet-main"),            'Wallet' => WalletModel::getWalletAmount('30'),            'ImageURL' => $cover_image,            'PlayLink' => $row['PlayLink'],            'DemoLink' => $row['DemoLink']);            $i += 1;        }        $result['count'] = $i;        return $result;    }            public function getAPIProductListWithWallet($request_data)    {                        $crud = new CRUD();        $sql = "SELECT * FROM product WHERE ID IN (SELECT ProductID FROM wallet WHERE MemberID = '".$request_data['memberID']."' AND Enabled = '1') order by CASE WHEN ID = '30' THEN 1 END DESC, Name ASC";        $result = array();        foreach ($this->dbconnect->query($sql) as $row)        {            $dataSet = array(            'ID' => $row['ID'],            'TypeID' => ProductTypeModel::getProductType($row['TypeID']),            'Name' => Helper::translate($row['Name'], "member-wallet-main"),            'Wallet' => WalletModel::getWalletAmount('30'),            'ImageURL' => $cover_image,            'PlayLink' => $row['PlayLink'],            'DemoLink' => $row['DemoLink']);            array_push($result, $dataSet);        }        return $result;    }        	public function getMainWalletProduct()	{		$crud = new CRUD();		$sql = "SELECT * FROM product WHERE ID = '30' AND Enabled = '1'  ORDER BY Name ASC";		$result = array();		$i = 0;		foreach ($this->dbconnect->query($sql) as $row)		{			$result[$i] = array(			'ID' => $row['ID'],			'TypeID' => ProductTypeModel::getProductType($row['TypeID']),			'Name' => $row['Name'],			'ImageURL' => $cover_image,			'PlayLink' => $row['PlayLink'],			'DemoLink' => $row['DemoLink']);			$i += 1;		}		$result['count'] = $i;		return $result;	}                public function getAPIMainWalletProduct()	{		$sql = "SELECT * FROM product WHERE ID = '30' AND Enabled = '1'  ORDER BY Name ASC";		$result = array();		foreach ($this->dbconnect->query($sql) as $row)		{			$dataSet = array(			'ID' => $row['ID'],			'TypeID' => ProductTypeModel::getProductType($row['TypeID']),			'Name' => $row['Name'],			'ImageURL' => $cover_image,			'PlayLink' => $row['PlayLink'],			'DemoLink' => $row['DemoLink']);                        array_push($result, $dataSet);		}		return $result;	}	public function getNonMainWalletProduct()	{		$crud = new CRUD();		$sql = "SELECT * FROM product WHERE ID != '30' AND Enabled = '1' AND ID IN (SELECT ProductID FROM wallet WHERE MemberID = '".$_SESSION['member']['ID']."' AND Enabled = '1') ORDER BY Name ASC";		$result = array();		$i = 0;		foreach ($this->dbconnect->query($sql) as $row)		{			$result[$i] = array(			'ID' => $row['ID'],			'TypeID' => ProductTypeModel::getProductType($row['TypeID']),			'Name' => $row['Name'],			'ImageURL' => $cover_image,			'PlayLink' => $row['PlayLink'],			'DemoLink' => $row['DemoLink']);			$i += 1;		}		$result['count'] = $i;		return $result;	}                public function getAPINonMainWalletProduct($request_data)	{		$crud = new CRUD();		$sql = "SELECT * FROM product WHERE ID != '30' AND Enabled = '1' AND ID IN (SELECT ProductID FROM wallet WHERE MemberID = '".$request_data['memberID']."' AND Enabled = '1') ORDER BY Name ASC";		$result = array();		foreach ($this->dbconnect->query($sql) as $row)		{			$dataSet = array(			'ID' => $row['ID'],			'TypeID' => ProductTypeModel::getProductType($row['TypeID']),			'Name' => $row['Name'],			'ImageURL' => $cover_image,			'PlayLink' => $row['PlayLink'],			'DemoLink' => $row['DemoLink']);                        array_push($result, $dataSet);		}                		return $result;	}    public function getProductListByType($param)    {        $crud = new CRUD();        $sql = "SELECT * FROM product WHERE TypeID = '".$param."' ORDER BY Name ASC";        $result = array();        $i = 0;        foreach ($this->dbconnect->query($sql) as $row)        {            $result[$i] = array(            'ID' => $row['ID'],            'TypeID' => ProductTypeModel::getProductType($row['TypeID']),            'Name' => $row['Name'],            'ImageURL' => $cover_image,            'PlayLink' => $row['PlayLink'],            'DemoLink' => $row['DemoLink'],            'WalletTotal' => WalletModel::getWalletByMember($row['ID']));            $i += 1;        }        $result['count'] = $i;        return $result;    }	public function AdminExport($param)	{		$sql = "SELECT * FROM product ".$_SESSION['product_'.$param]['query_condition']." ORDER BY ID ASC";		$result = array();		$result['filename'] = $this->config['SITE_NAME']."_Products";		$result['header'] = $this->config['SITE_NAME']." | Products (" . date('Y-m-d H:i:s') . ")\n\nID, Type, Name, Image URL, Play Link, Demo Link";		$result['content'] = '';		$i = 0;		foreach ($this->dbconnect->query($sql) as $row)		{			$result['content'] .= "\"".$row['ID']."\",";			$result['content'] .= "\"".ProductTypemodel::getProductType($row['TypeID'])."\",";			$result['content'] .= "\"".$row['Name']."\",";			$result['content'] .= "\"".$row['ImageURL']."\",";			$result['content'] .= "\"".$row['PlayLink']."\",";			$result['content'] .= "\"".$row['DemoLink']."\"\n";			$i += 1;		}		$this->output = array(		'config' => $this->config,		'page' => array('title' => "Exporting..."),		'content' => $result,		'secure' => TRUE,		'meta' => array('active' => "on"));		return $this->output;	}}?>